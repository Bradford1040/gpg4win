#! /bin/sh
patch -p1 -f -l $* < $0
exit $?

From b85702bd17539b8374c9e4f3977e012036c01913 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ingo=20Kl=C3=B6cker?= <dev@ingo-kloecker.de>
Date: Thu, 26 Jun 2025 17:02:01 +0200
Subject: [PATCH] Fix reading of localized config values on Windows (and macOS)

On Linux, this works already because QLocale respects LANGUAGE on Linux
(and there's no separate "display language" like on Windows). On Windows
(and macOS), we need to use the same workaround as in ki18n for handling
LANGUAGE (which is used by kxmlgui to set the user-configured
application-specific language override) and for preferring the configured
display language over the system language (aka the default language of the
Windows installation).
---
 autotests/CMakeLists.txt  |  2 +-
 autotests/kconfigtest.cpp | 41 +++++++++++++++++++++++++++++++++++++++
 autotests/kconfigtest.h   |  1 +
 src/core/kconfig.cpp      | 22 ++++++++++++++++++++-
 4 files changed, 64 insertions(+), 2 deletions(-)

diff --git a/autotests/CMakeLists.txt b/autotests/CMakeLists.txt
index 0901c0c7..97e6e224 100644
--- a/autotests/CMakeLists.txt
+++ b/autotests/CMakeLists.txt
@@ -38,7 +38,7 @@ ecm_add_tests(
     ksharedconfig_in_global_object.cpp
     dbussanitizertest.cpp
     NAME_PREFIX kconfigcore-
-    LINK_LIBRARIES KF6::ConfigCore Qt6::Test Qt6::Concurrent
+    LINK_LIBRARIES KF6::ConfigCore Qt6::Test Qt6::Concurrent Qt6::CorePrivate
 )

 add_dependencies(test_kconf_update kconf_update)
diff --git a/autotests/kconfigtest.cpp b/autotests/kconfigtest.cpp
index cd0bcaaf..32f905ba 100644
--- a/autotests/kconfigtest.cpp
+++ b/autotests/kconfigtest.cpp
@@ -21,6 +21,8 @@
 #include <kconfigwatcher.h>
 #include <ksharedconfig.h>

+#include <private/qlocale_p.h> // QSystemLocale
+
 #ifdef Q_OS_UNIX
 #include <utime.h>
 #endif
@@ -28,6 +30,8 @@
 #include <unistd.h> // getuid
 #endif

+using namespace Qt::StringLiterals;
+
 KCONFIGGROUP_DECLARE_ENUM_QOBJECT(KConfigTest, Testing)
 KCONFIGGROUP_DECLARE_FLAGS_QOBJECT(KConfigTest, Flags)

@@ -1547,6 +1551,43 @@ void KConfigTest::testLocaleConfig()
     QFile::remove(file);
 }

+void KConfigTest::testLocaleConfigWithOverrideLanguage()
+{
+    // simulate usage of language override (kxmlgui);
+    // we need to create a new QSystemLocale to make Qt update the locale
+    qputenv("LANGUAGE", "ca");
+    QSystemLocale newSystemLocale{};
+
+    // Initialize the testdata
+    QDir().mkpath(m_testConfigDir);
+    const QString file = m_testConfigDir + QLatin1String("/localized.test");
+    QFile::remove(file);
+    QFile f(file);
+    QVERIFY(f.open(QIODevice::WriteOnly));
+    QTextStream ts(&f);
+    ts << "[Test]\n";
+    ts << "foo=4\n";
+    ts << "foo[ca]=5\n";
+    ts << "foostring=primary\n";
+    ts << "foostring[ca]=nice\n";
+    ts << "foobool=primary\n";
+    ts << "foobool[ca]=true\n";
+    f.close();
+
+    // Load the testdata
+    QVERIFY(QFile::exists(file));
+    KConfig config(file);
+    QVERIFY(config.locale().startsWith("ca"_L1));
+
+    KConfigGroup cg2(&config, QStringLiteral("Test"));
+    QCOMPARE(cg2.readEntry("foo", 3), 5);
+    QCOMPARE(cg2.readEntry("foostring"), QStringLiteral("nice"));
+    QCOMPARE(cg2.readEntry("foobool", false), true);
+
+    // Clean up after the testcase
+    QFile::remove(file);
+}
+
 void KConfigTest::testDeleteWhenLocalized()
 {
     // Initialize the testdata
diff --git a/autotests/kconfigtest.h b/autotests/kconfigtest.h
index e7d7a47f..fa1474e5 100644
--- a/autotests/kconfigtest.h
+++ b/autotests/kconfigtest.h
@@ -78,6 +78,7 @@ private Q_SLOTS:
     void testSharedConfig();
     void testOptionOrder();
     void testLocaleConfig();
+    void testLocaleConfigWithOverrideLanguage();
     void testDirtyAfterRevert();
     void testKdeGlobals();
     void testLocalDeletion();
diff --git a/src/core/kconfig.cpp b/src/core/kconfig.cpp
index 7618ea8a..e25e751e 100644
--- a/src/core/kconfig.cpp
+++ b/src/core/kconfig.cpp
@@ -68,6 +68,26 @@ static const Qt::CaseSensitivity sPathCaseSensitivity = Qt::CaseSensitive;
 static const Qt::CaseSensitivity sPathCaseSensitivity = Qt::CaseInsensitive;
 #endif

+static QString getDefaultLocaleName()
+{
+#if defined(Q_OS_WIN) || defined(Q_OS_MAC)
+    if (QLocale() == QLocale::system()) {
+        // If the default locale hasn't been changed then
+        // On Windows and Apple OSs, we cannot use QLocale::system() if an application-specific
+        // language was set by kxmlgui because Qt ignores LANGUAGE on Windows and Apple OSs.
+        if (const auto languages = qEnvironmentVariable("LANGUAGE").split(u':', Qt::SkipEmptyParts); !languages.isEmpty()) {
+            return languages.front();
+        }
+        // Also prefer the configured display language over the system language
+        if (const auto languages = QLocale::system().uiLanguages(); !languages.isEmpty()) {
+            // uiLanguages() uses dashes as separator, but KConfig assumes underscores
+            return languages.value(0).replace(u'-', u'_');
+        }
+    }
+#endif
+    return QLocale().name();
+}
+
 KConfigPrivate::KConfigPrivate(KConfig::OpenFlags flags, QStandardPaths::StandardLocation resourceType)
     : openFlags(flags)
     , resourceType(resourceType)
@@ -118,7 +138,7 @@ KConfigPrivate::KConfigPrivate(KConfig::OpenFlags flags, QStandardPaths::Standar
     //        mappingsRegistered = true;
     //    }

-    setLocale(QLocale().name());
+    setLocale(getDefaultLocaleName());
 }

 bool KConfigPrivate::lockLocal()
--
2.50.0
