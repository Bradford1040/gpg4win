#! /bin/sh
patch -p1 -l -f $* < $0
exit $?

From 537ba7bbc85839aea413b8d08e0096deb8525052 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ingo=20Kl=C3=B6cker?= <dev@ingo-kloecker.de>
Date: Wed, 5 Feb 2025 09:56:56 +0100
Subject: [PATCH] Add option to disable OpenGL support

---
 CMakeLists.txt            |  9 ++++++++-
 src/CMakeLists.txt        |  5 ++++-
 src/config-kcrash.h.cmake |  1 +
 src/kcrash.cpp            | 11 +++++++++--
 4 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ff3f3c8..efa7d8c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,8 +20,15 @@ include(KDECMakeSettings)
 include(KDEGitCommitHooks)
 include(ECMDeprecationSettings)

+option(WITH_OPENGL "Build with OpenGL support" ON)
+
 set(REQUIRED_QT_VERSION 6.6.0)
-find_package(Qt6 ${REQUIRED_QT_VERSION} CONFIG REQUIRED Core Gui OpenGL)
+set(REQUIRED_QT_COMPONENTS Core Gui)
+if(WITH_OPENGL)
+    list(APPEND REQUIRED_QT_COMPONENTS OpenGL)
+    SET(HAVE_OPENGL TRUE)
+endif()
+find_package(Qt6 ${REQUIRED_QT_VERSION} CONFIG REQUIRED ${REQUIRED_QT_COMPONENTS})

 if(UNIX AND NOT APPLE AND NOT ANDROID AND NOT HAIKU)
     option(WITH_X11 "Build with X11 integration" ON)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index eea6013..bfac71b 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -45,7 +45,10 @@ ecm_generate_export_header(KF6Crash
 target_include_directories(KF6Crash INTERFACE "$<INSTALL_INTERFACE:${KDE_INSTALL_INCLUDEDIR_KF}/KCrash>")

 target_link_libraries(KF6Crash PUBLIC Qt6::Core)
-target_link_libraries(KF6Crash PRIVATE Qt6::Gui Qt6::OpenGL KF6::CoreAddons)
+target_link_libraries(KF6Crash PRIVATE Qt6::Gui KF6::CoreAddons)
+if(WITH_OPENGL)
+target_link_libraries(KF6Crash PRIVATE Qt6::OpenGL)
+endif()

 if (HAIKU)
        target_link_libraries(KF6Crash PRIVATE network)
diff --git a/src/config-kcrash.h.cmake b/src/config-kcrash.h.cmake
index 9c5c0bc..a8a0f60 100644
--- a/src/config-kcrash.h.cmake
+++ b/src/config-kcrash.h.cmake
@@ -1,3 +1,4 @@
+#cmakedefine01 HAVE_OPENGL
 #cmakedefine01 HAVE_X11
 #cmakedefine01 KCRASH_CORE_PATTERN_RAISE

diff --git a/src/kcrash.cpp b/src/kcrash.cpp
index 6f53d4a..3395b8e 100644
--- a/src/kcrash.cpp
+++ b/src/kcrash.cpp
@@ -45,11 +45,14 @@
 #include <QFile>
 #include <QGuiApplication>
 #include <QLibraryInfo>
+#include <QStandardPaths>
+#include <QThread>
+
+#if HAVE_OPENGL
 #include <QOffscreenSurface>
 #include <QOpenGLContext>
 #include <QOpenGLFunctions>
-#include <QStandardPaths>
-#include <QThread>
+#endif

 #if HAVE_X11
 #include <X11/Xlib.h>
@@ -135,6 +138,7 @@ using DetailsHash = QHash<QByteArray, QByteArray>;
 std::unique_ptr<const DetailsHash> s_tags; // Sentry tags
 std::unique_ptr<const DetailsHash> s_extraData; // Sentry extra data

+#if HAVE_OPENGL
 QString glRenderer()
 {
     QOpenGLContext context;
@@ -154,6 +158,7 @@ QString glRenderer()
     });
     return QString::fromUtf8(reinterpret_cast<const char *>(context.functions()->glGetString(GL_RENDERER)));
 }
+#endif

 QString bootId()
 {
@@ -235,9 +240,11 @@ void KCrash::initialize()
         const QString path = QCoreApplication::applicationFilePath();
         s_appFilePath.reset(qstrdup(qPrintable(path))); // This intentionally cannot be changed by the application!
         KCrash::setApplicationFilePath(path);
+#if HAVE_OPENGL
         if (qobject_cast<QGuiApplication *>(QCoreApplication::instance())) {
             s_glRenderer.reset(qstrdup(glRenderer().toUtf8().constData()));
         }
+#endif
     } else {
         qWarning() << "This process needs a QCoreApplication instance in order to use KCrash";
     }
--
2.48.1
